// Mocks generated by Mockito 5.3.2 from annotations
// in demo_app/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:demo_app/models/todo.dart' as _i5;
import 'package:demo_app/repository/todoRepository.dart' as _i2;
import 'package:demo_app/services/todoService.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoRepository_0 extends _i1.SmartFake
    implements _i2.TodoRepository {
  _FakeTodoRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoService extends _i1.Mock implements _i3.TodoService {
  MockTodoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i2.TodoRepository);
  @override
  set todoRepository(_i2.TodoRepository? _todoRepository) => super.noSuchMethod(
        Invocation.setter(
          #todoRepository,
          _todoRepository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<List<_i5.Todo>> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Todo>>.value(<_i5.Todo>[]),
      ) as _i4.Future<List<_i5.Todo>>);
}
